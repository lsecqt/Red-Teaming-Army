[[{"l":"Welcome"}],[{"l":"Weaponizing DLL Hijacking via DLL Proxying"},{"l":"Introduction","p":["Dynamic Link Library (DLL) is a collection of code that can be shared across multiple processes in Windows. A process imports a DLL when it needs to use functions or resources externally provided by it. For example, if a message box is displayed, the User32.dll would be imported to the running process.","DLL Hijacking is an attack, in which the intruder overwrites a specific and predefined DLL on the remote file system. When a process loads the overwritten library, a malicious code will be executed instead of the real one.","While DLL Hijacking is usually exploited for persistence, privilege escalation and lateral movement, it is a great technique for initial access, since it de-chains the download from the execution phase, which is highly suspicious behavior for EDRs (Endpoint Detection and Response).","A nice webinar on EDR evasion with DLL Hijacking can be found here: https://www.youtube.com/watch?v=CKfjLnEMfvI"]},{"l":"Theory","p":["The process of loading DLLs is automatically handled by the Windows OS. To demonstrate it let's take the following C code:","When executed, a message box will appear. If we inspect the program with Process Hacker 2 we can confirm that the user32.dll module is indeed loaded into the process.","user32.dll viewed from Process Hacker","If you replace one of the loaded DLL with a malicious one, the next time a process loads it, the malicious code inside will get executed. This is DLL Hijacking.","By default, in Windows OS, when an application loads dynamic link libraries (DLLs), the operating system follows a specific search order to locate these DLLs. The search order is prioritized as:","The directory from which the application is loaded: The system looks for DLLs in the same directory as the executable file of the application.","The current working directory: If the DLL is not found in the application's directory, the system searches the current working directory. However, be cautious with relying on the current working directory, as it can change during the execution of the program.","Windows System directories: If the DLL is not found in the application's directory or the current working directory, the system searches the directories listed in the system's PATH environment variable. This includes standard system directories like C:\\Windows\\System32.","Windows directories: If the DLL is not found in the aforementioned locations, the system searches the Windows directory.","Directories listed in the PATH environment variable: If the DLL is not found in any of the previous locations, the system searches the directories listed in the PATH environment variable.","This search priority is often abused for DLL Hijacking attacks, since a lot of applications will initially request a DLL from a folder where the user has write access rights over.","When developing an application, it is important to use full paths for the needed modules in order to avoid hijacking vulnerabilities."]},{"l":"Classical DLL Hijacking","p":["By \"Classical DLL Hijacking\" I mean the exploitation of DLL Hijacking vulnerability just for demonstrative purposes (a.k.a not caring about evasion, you just want to prove that the application is vulnerable).","During this blogpost I am using DVTA for my testing environment.","Finding a DLL Hijacking vulnerability is as simple as scanning different processes for their module imports, and overwriting a module if you have write access to the path on the filesystem where it is missing or loaded.","This behavior can be easily analyzed with tools like Process Monitor. If you specify the following filters, ProcMon will scan the defined process for all DLL imports.","Filtering DVTA process and all DLL imports","After the filters are applied it is recommended to restart the application for maximum coverage. Eventually, after watching the process activity you should come up to something like this:","DVTA cannot find C:\\Users\\lsec\\Desktop\\DVTA\\DVTA\\bin\\Release\\profapi.dll","This is a perfect candidate for DLL Hijacking attack, since the DVTA application is trying to load profapi.dll within my user's folder.","For generating a sample DLL, we can use either custom made one (recommended), or a msfvenom one. For the sake of the demo, I created the following custom DLL, to spawn \"calc.exe\" process.","DLL's entry point is called \"DLLMain\" and it executes code via various conditions on how the DLL is being called. When a process reads a function from the DLL it generally uses \"DLL_PROCESS_ATTACH\". We will store our custom code there! While this sample POC is designed to just spawn calc.exe, in real scenario you want your payload execution logic here!","The same behavior can be replicated with msfvenom:","After the DLL is generated, it is enough to just transfer it over the directory from where the application is trying to load it, and it is done. When the application is restarted and the DLL is re-imported, the payload behind will get executed.","Spawning calc.exe after placing profapi.dll and restarting the application","During the \"Classical DLL Hijacking\" attack, the targeted application will most likely stop working after the custom DLL is executed! This is because the application requires specific functions from the imported DLL and our custom one is lacking them."]},{"l":"DLL Proxying","p":["Additionally, the payload execution should not be handled poorly, if the payload execution thread corrupts the process, even though the exported functions are present, the application could still timeout.","After combining the pieces I created the following POC:","After executing the command, make sure to restart the targeted binary, and then terminate Spartacus by pressing enter. When stopped, it will generate similar output: Spartacus automatically using ProcMon to filter Hijackable DLLs","After performing DLL Hijacking with the compiled DLL, the binary executes as normal, while the shell callback is present. Application is running as expected","AV / EDR Evasion","DLL Proxying is when you embed the exported functions from the original DLL into your malicious one. This way when the DLL is hijacked and loaded, the malicious payload will get executed in parallel with the intended and needed exported functions.","From the output, Spartacus founds which DLLs are hijackable and forwardable, exported their functions and generated a C++ template for the DLLs.","I already have a video on DLL Proxying, so if you prefer watching instead of reading, feel welcomed to my channel:","In a DLL, an exported function is a function that is made available for other applications or DLLs to use. When a function is exported, it means that it is exposed and can be called by external programs. Exported functions could serve as entry points for other software components to utilize the functionality provided by the DLL.","In this example it is clear that the previously exploited profapi.dll is not a good match, since Spartacus cannot export its functions. However, CRYPTSP.dll looks like a better option.","No matter in which scenario the DLL Hijacking is needed, it is important to not break the application / environment of the victim. No matter how evasive your payloads are, if the client software is corrupted, it could easily lead to internal escalation.","Now let's tweek the malicious template from Spartacus! I created Offensive CPP repository, its idea is to host offensive C/C++ independent snippets, which can be used in various scenarios. Let's copy some shellcode execution code. During the demo, I am using the FileMap snippet.","Persistence","Privilege Escalation","Receiving the reverse shell","Since the \"Classical DLL Hijacking\" is super simple to perform, it is also extremely ineffective in real engagements. In order to weaponize this attack, it is important to understand \"why\".","Spartacus requires ProcMon to be installed.","Spartacus will automatically engage with ProcMon, setup filters and find DLL hijackable binaries. After finding such, it will try to export all the functions it needs from the mentioned DLL.","The application block is generally caused by 2 factors:","The C++ template for CRYPTSP.dll looks like this in my example:","The last step is to generate a shellcode from msfvenom:","The malicious DLL is missing the functions that are needed from the application.","The payload is hijacking the thread, which can result in a timeout.","To run Spartacus, you can follow the syntax:","To solve this problem we must perform something called DLL proxying. It looks like this: https://www.ired.team/offensive-security/persistence/dll-proxying-for-persistenceDLL","Typically, the DLL Hijacking attacks are utilized for:","While each one of these topics are super complex and requires a lot of dedicated attention, we will not dive into them today. In this blog we will focus on how to weaponize the DLL Hijacking attack, so that it does not break the application runtime after the payload is executed. I am going to release more blogs on these topics in future! Stay tuned!","While this approach may sound super complex, there are tools that can export all the needed functions in C/C++ template. One such tool is called Spartacus."]},{"l":"Conclusion","p":["As mentioned before, DLL Hijacking on its own is a valid finding and often during pentests, it can be enough just to prove that the targeted application is vulnerable. However, in more complex cases, you may need to operate more stealthy.","Since the \"Classical DLL Hijacking\" is corrupting the workflow of the targeted application, this can be a huge IOC (Indicator Of Compromise). To evade being detected, before implementing any custom evasive payloads, you have to make sure that your techniques do not disrupt anyone's environment. While DLL Proxying may sound more complicated and requires additional programming skills, it is a nice way to weaponize the DLL Hijacking attack.","More on AV / EDR evasion blogs are yet to come!","Thank you for your attention, I really hope this blog was useful, if so, you can support me on:","Patreon","BuyMeACoffee","Youtube","Twitter","Github","Also make sure to join the Red Teaming Army Discord channel."]}]]